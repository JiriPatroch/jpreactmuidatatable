"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _Create = _interopRequireDefault(require("@material-ui/icons/Create"));

var _DeleteSharp = _interopRequireDefault(require("@material-ui/icons/DeleteSharp"));

var _JpTableHeadCell = _interopRequireDefault(require("./JpTableHeadCell"));

var _store = require("./store/store");

var _JpTableHeadStyles = require("./styles/JpTableHeadStyles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStyles = (0, _styles.makeStyles)(_JpTableHeadStyles.JpTableHeadStyles);

function JpTableHead(props) {
  var classes = useStyles();
  var columns = props.columns,
      onSelectAllClick = props.onSelectAllClick,
      numSelected = props.numSelected,
      rowCount = props.rowCount,
      onRequestSort = props.onRequestSort,
      moveCard = props.moveCard,
      tableSetting = props.tableSetting;

  var createSortHandler = function createSortHandler(property) {
    return function (event) {
      onRequestSort(event, property);
    };
  }; //context API START


  var _React$useContext = _react.default.useContext(_store.MainTableContext),
      state = _React$useContext.state;

  var order = state.order,
      orderBy = state.orderBy; //context API END

  return _react.default.createElement(_core.TableHead, null, _react.default.createElement(_core.TableRow, null, _react.default.createElement(_core.TableCell, {
    padding: "checkbox"
  }, _react.default.createElement(_core.Checkbox, {
    indeterminate: numSelected > 0 && numSelected < rowCount,
    checked: numSelected === rowCount,
    onChange: onSelectAllClick
  })), columns.map(function (headCell, index) {
    return _react.default.createElement(_JpTableHeadCell.default, {
      index: index,
      id: headCell.id,
      moveCard: moveCard,
      key: index,
      align: headCell.numeric ? "right" : "left",
      padding: headCell.disablePadding ? "none" : "default",
      sortDirection: orderBy === headCell.id ? order : false
    }, headCell.isSortable ? _react.default.createElement(_core.TableSortLabel, {
      active: orderBy === headCell.id,
      direction: order,
      onClick: createSortHandler(headCell.id)
    }, headCell.label, orderBy === headCell.id ? _react.default.createElement("span", {
      className: classes.visuallyHidden
    }, order === "desc" ? "sorted descending" : "sorted ascending") : null) : _react.default.createElement(_core.Typography, {
      color: "secondary",
      variant: "subtitle2",
      className: classes.root
    }, headCell.label));
  }), tableSetting.hasEditing ? _react.default.createElement(_core.TableCell, null, _react.default.createElement(_Create.default, null)) : null, tableSetting.hasDeleting ? _react.default.createElement(_core.TableCell, null, _react.default.createElement(_DeleteSharp.default, null)) : null));
}

JpTableHead.propTypes = {
  columns: _propTypes.default.array.isRequired,
  onSelectAllClick: _propTypes.default.func.isRequired,
  numSelected: _propTypes.default.number.isRequired,
  rowCount: _propTypes.default.number.isRequired,
  onRequestSort: _propTypes.default.func.isRequired,
  moveCard: _propTypes.default.func.isRequired,
  tebleSetting: _propTypes.default.object
};
var _default = JpTableHead;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,