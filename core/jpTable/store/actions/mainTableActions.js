"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Types = _interopRequireWildcard(require("./../actions/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var useMainTableActions = function useMainTableActions(dispatch) {
  var setOrder = function setOrder(isDesc) {
    if (isDesc) {
      dispatch({
        type: Types.SET_ORDER,
        payload: "asc"
      });
    } else {
      dispatch({
        type: Types.SET_ORDER,
        payload: "desc"
      });
    }
  };

  var setOrderBy = function setOrderBy(property) {
    dispatch({
      type: Types.SET_ORDER_BY,
      payload: property
    });
  };

  var setSelected = function setSelected(data) {
    dispatch({
      type: Types.SET_SELECTED,
      payload: data
    });
  };

  var setPage = function setPage(pageNumber) {
    dispatch({
      type: Types.SET_PAGE,
      payload: pageNumber
    });
  };

  var setDense = function setDense(dense) {
    dispatch({
      type: Types.SET_DENSE,
      payload: dense
    });
  };

  var setRowsPerPage = function setRowsPerPage(RowsPerPage) {
    dispatch({
      type: Types.SET_ROWS_PER_PAGE,
      payload: RowsPerPage
    });
  };

  var setSearchTerm = function setSearchTerm(searchTerm) {
    dispatch({
      type: Types.SET_SEARCH_TERM,
      payload: searchTerm
    });
  };

  var setIsSearching = function setIsSearching(isSearching) {
    dispatch({
      type: Types.SET_IS_SEARCHING,
      payload: isSearching
    });
  };

  var setIsSearchingMulti = function setIsSearchingMulti(isSearchingMulti) {
    dispatch({
      type: Types.SET_IS_SEARCHING_MULTI,
      payload: isSearchingMulti
    });
  };

  var setMultiSearchTerms = function setMultiSearchTerms(searchTerms) {
    dispatch({
      type: Types.SET_MULTI_SEARCH_TERMS,
      payload: searchTerms
    });
  };

  var setIsExactly = function setIsExactly(e) {
    if (e.target.checked === true) {
      dispatch({
        type: Types.SET_IS_EXACTLY,
        payload: _defineProperty({}, e.target.name, true)
      });
    } else {
      dispatch({
        type: Types.SET_IS_EXACTLY,
        payload: _defineProperty({}, e.target.name, false)
      });
    }
  };

  return {
    setOrder: setOrder,
    setOrderBy: setOrderBy,
    setSelected: setSelected,
    setPage: setPage,
    setDense: setDense,
    setRowsPerPage: setRowsPerPage,
    setSearchTerm: setSearchTerm,
    setIsSearching: setIsSearching,
    setIsSearchingMulti: setIsSearchingMulti,
    setMultiSearchTerms: setMultiSearchTerms,
    setIsExactly: setIsExactly
  };
};

var _default = useMainTableActions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,