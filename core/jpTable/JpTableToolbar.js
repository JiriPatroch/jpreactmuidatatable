"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _Menu = _interopRequireDefault(require("@material-ui/icons/Menu"));

var _SettingsApplicationsSharp = _interopRequireDefault(require("@material-ui/icons/SettingsApplicationsSharp"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _JpTableToolbarStyles = require("./styles/JpTableToolbarStyles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useStyles = (0, _styles.makeStyles)(_JpTableToolbarStyles.JpTableToolbarStyles);

var JpTableToolbar = function JpTableToolbar(_ref) {
  var numSelected = _ref.numSelected,
      columns = _ref.columns,
      handleHideShowColumn = _ref.handleHideShowColumn,
      handleSearch = _ref.handleSearch,
      tableSetting = _ref.tableSetting;
  var classes = useStyles();

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      anchorEl = _React$useState2[0],
      setAnchorEl = _React$useState2[1];

  var _React$useState3 = _react.default.useState(columns),
      _React$useState4 = _slicedToArray(_React$useState3, 1),
      columnsNames = _React$useState4[0];

  var handleClick = function handleClick(event) {
    setAnchorEl(event.currentTarget);
  };

  var handleClose = function handleClose() {
    setAnchorEl(null);
  };

  return _react.default.createElement(_core.Toolbar, {
    className: (0, _clsx2.default)(classes.root, _defineProperty({}, classes.highlight, numSelected > 0))
  }, _react.default.createElement("div", {
    className: classes.title
  }, numSelected > 0 ? _react.default.createElement(_core.Typography, {
    color: "inherit",
    variant: "subtitle1"
  }, numSelected, " selected") : _react.default.createElement(_core.Typography, {
    variant: "h6",
    id: "tableTitle"
  }, tableSetting.tableName)), _react.default.createElement("div", {
    className: classes.spacer
  }), _react.default.createElement("div", {
    className: classes.actions
  }, numSelected > 0 ? _react.default.createElement(_core.Tooltip, {
    title: "Delete"
  }, _react.default.createElement(_core.IconButton, {
    "aria-label": "delete"
  }, _react.default.createElement(_Delete.default, null))) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_core.Box, {
    display: "flex",
    flexDirection: "row"
  }, tableSetting.globalSearch ? _react.default.createElement("div", {
    className: classes.search
  }, _react.default.createElement("div", {
    className: classes.searchIcon
  }, _react.default.createElement(_Search.default, null)), _react.default.createElement(_core.InputBase, {
    placeholder: "Search\u2026",
    classes: {
      root: classes.inputRoot,
      input: classes.inputInput
    },
    inputProps: {
      "aria-label": "search"
    },
    onChange: function onChange(e) {
      return handleSearch(e);
    }
  })) : null, tableSetting.columnsHideShowSwitch ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_core.Tooltip, {
    title: "Settings"
  }, _react.default.createElement(_core.IconButton, {
    "aria-label": "Settings",
    "aria-controls": "simple-menu",
    "aria-haspopup": "true",
    onClick: handleClick
  }, _react.default.createElement(_SettingsApplicationsSharp.default, null))), _react.default.createElement(_core.Menu, {
    id: "simple-menu",
    anchorEl: anchorEl,
    keepMounted: true,
    open: Boolean(anchorEl),
    onClose: handleClose,
    PaperProps: {
      style: {
        padding: 20
      }
    }
  }, _react.default.createElement(_core.Typography, {
    variant: "subtitle1",
    align: "center",
    color: "secondary"
  }, "Hide/Show Columns"), columnsNames.map(function (headCell, index) {
    return _react.default.createElement(_core.Box, {
      className: classes.menuItemsBox,
      key: index
    }, _react.default.createElement(_core.MenuItem, {
      onClick: handleClose
    }, headCell.label), _react.default.createElement(_core.Checkbox, {
      onClick: function onClick() {
        return handleHideShowColumn(headCell);
      }
    }));
  }))) : null, tableSetting.tableMenu ? _react.default.createElement(_core.Tooltip, {
    title: "Table Menu"
  }, _react.default.createElement(_core.IconButton, {
    "aria-label": "table menu"
  }, _react.default.createElement(_Menu.default, null))) : null))));
};

JpTableToolbar.propTypes = {
  numSelected: _propTypes.default.number.isRequired,
  columns: _propTypes.default.array.isRequired,
  handleHideShowColumn: _propTypes.default.func.isRequired,
  handleSearch: _propTypes.default.func.isRequired,
  tableSetting: _propTypes.default.object.isRequired
};
var _default = JpTableToolbar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,