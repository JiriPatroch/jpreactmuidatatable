"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _reactDnd = require("react-dnd");

var _TableCell = _interopRequireDefault(require("@material-ui/core/TableCell"));

var _ItemTypes = _interopRequireDefault(require("./ItemTypes"));

var _JpTableHeadCellStyles = require("./styles/JpTableHeadCellStyles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(_JpTableHeadCellStyles.JpTableHeadCellStyles);

var JpTableHeadCell = _react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      isDragging = _ref.isDragging,
      connectDragSource = _ref.connectDragSource,
      connectDropTarget = _ref.connectDropTarget;
  var elementRef = (0, _react.useRef)(null);
  connectDragSource(elementRef);
  connectDropTarget(elementRef);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      getNode: function getNode() {
        return elementRef.current;
      }
    };
  });
  var classes = useStyles();
  return _react.default.createElement(_TableCell.default, {
    ref: elementRef,
    className: !isDragging ? classes.jpCellMain : classes.jpCellMainDragged
  }, children);
});

JpTableHeadCell.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  isDragging: _propTypes.default.bool.isRequired,
  connectDragSource: _propTypes.default.func.isRequired,
  connectDropTarget: _propTypes.default.func.isRequired
};

var _default = (0, _reactDnd.DropTarget)(_ItemTypes.default.HEADCELL, {
  hover: function hover(props, monitor, component) {
    if (!component) {
      return null;
    }

    var node = component.getNode();

    if (!node) {
      return null;
    }

    var dragIndex = monitor.getItem().index;
    var hoverIndex = props.index;

    if (dragIndex === hoverIndex) {
      return;
    }

    var hoverBoundingRect = node.getBoundingClientRect();
    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
    var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;
    var clientOffset = monitor.getClientOffset();
    var hoverClientY = clientOffset.y - hoverBoundingRect.top;
    var hoverClientX = clientOffset.x - hoverBoundingRect.left;
    var upwards = dragIndex > hoverIndex && hoverClientY > hoverMiddleY;
    var downwards = dragIndex < hoverIndex && hoverClientY < hoverMiddleY;
    var leftwards = dragIndex > hoverIndex && hoverClientX > hoverMiddleX;
    var rightwards = dragIndex < hoverIndex && hoverClientX < hoverMiddleX;

    if (upwards && (leftwards || rightwards)) {
      return;
    }

    if (downwards && (leftwards || rightwards)) {
      return;
    }

    props.moveCard(dragIndex, hoverIndex);
    monitor.getItem().index = hoverIndex;
  }
}, function (connect) {
  return {
    connectDropTarget: connect.dropTarget()
  };
})((0, _reactDnd.DragSource)(_ItemTypes.default.HEADCELL, {
  beginDrag: function beginDrag(props) {
    return {
      id: props.id,
      index: props.index
    };
  }
}, function (connect, monitor) {
  return {
    connectDragPreview: connect.dragPreview(),
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
  };
})(JpTableHeadCell));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,